<?xml version="1.0" encoding="UTF-8"?>
<protocol name="lvr_invisible_region">

  <copyright>
    Copyright Â© 2025 Eduardo Hopperdietzel

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <description summary="invisible region of surfaces">
    Warning: This protocol is experimental, and backward-incompatible changes may be 
    made in the future.
  </description>

  <interface name="lvr_invisible_region_manager" version="1">
    <description summary="invisible region manager">
      This interface allows a compositor to announce support for invisible regions.
    </description>

    <enum name="error">
      <entry name="already_constructed" value="0" 
        summary="the surface already has an associated lvr_invisible_region object"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the invisible region manager object">
        This doesn't destroy objects created with the manager.
      </description>
    </request>

    <request name="get_invisible_region">
      <description summary="create a new invisible region object">
        The surface must not already have an associated lvr_invisible_region object, otherwise, 
        the already_constructed error will be emitted.
      </description>
      <arg name="id" type="new_id" interface="lvr_invisible_region"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>
  </interface>

  <interface name="lvr_invisible_region" version="1">
    <description summary="invisible region object">
      This extension builds upon existing regions exposed in wl_surface, such as 
      damage, opaque, and input regions.

      Clients may use this extension to inform the compositor which parts of the 
      surface are fully transparent (alpha = 0), allowing the compositor to optimize 
      rendering by skipping these regions.

      Clients must not assume that the compositor will always skip rendering the region 
      and should still ensure that the actual content is invisible if that is the 
      intended result.

      The invisible region does not affect damage handling. If new parts of the surface 
      become invisible and are marked as such, the client must still damage them as usual.

      If the invisible region intersects the opaque region, the overlapping area is 
      also treated as invisible.
    </description>

    <enum name="error">
      <entry name="destroyed_surface" value="0" 
        summary="surface destroyed before its lvr_invisible_region object"/>
    </enum>
    
    <request name="destroy" type="destructor">
      <description summary="destroy the invisible region object">
        Switch back to a mode with an empty invisible region at the next commit.

        Must be destroyed before its associated surface otherwise the
        destroyed_surface error will be emitted.
      </description>
    </request>
    
    <request name="set_region">
      <description summary="set the invisible region">
        The region is defined in local surface coordinates. The compositor will clip 
        any portion that extends beyond the surface bounds.

        If the region is null, the entire surface is treated as invisible. Note that 
        this does not imply the surface is unmapped.

        The region is double-buffered and changes take effect upon the next commit.

        The initial value is an empty region (non-null).
      </description>
      <arg name="region" type="object" interface="wl_region" allow-null="true"/>
    </request>
    
  </interface>
</protocol>
