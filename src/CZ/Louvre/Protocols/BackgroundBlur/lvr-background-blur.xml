<?xml version="1.0" encoding="UTF-8"?>
<protocol name="lvr_background_blur">
  <copyright>
    Copyright © 2025 Eduardo Hopperdietzel
    Copyright © 2025 Fox2Code

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <description summary="background blur effect for surfaces">
    Warning: This protocol is experimental, and backward-incompatible changes may be 
    made in the future.
  </description>

  <interface name="lvr_background_blur_manager" version="1">
    <description summary="background blur manager">
      This interface allows a compositor to declare support for blurring surface 
      backgrounds.

      Immediately after the client binds to this global, the compositor must send a 
      masking_capabilities event. Once this event is sent, the client is permitted
      to issue get_background_blur requests.
    </description>

    <enum name="masking_capabilities" bitfield="true">
      <description summary="masking capabilities">
        Defines the masking options supported by the compositor.
      </description>
      <entry name="none" value="0">
        <description summary="no masking options available">
          The client can only define the blur region using lvr_background_blur.set_region.
        </description>
      </entry>
      <entry name="round_rect" value="1">
        <description summary="support for rounded rectangle masks">
          The client can further clip the blur region using lvr_background_blur.set_round_rect_mask.
        </description>
      </entry>
      <entry name="svg_path" value="2">
        <description summary="support for SVG path masks">
          The client can further clip the blur region using lvr_background_blur.set_svg_path_mask.
        </description>
      </entry>
    </enum>

    <enum name="error">
      <entry name="already_constructed" value="0" 
        summary="the surface already has an associated background blur object"/>
    </enum>

    <event name="masking_capabilities">
      <description summary="advertises supported masking capabilities">
        This event must be sent exactly once, immediately after the client binds 
        to this global, regardless of whether masking capabilities are supported.

        Once this event is sent, the capabilities cannot be modified.
      </description>
      <arg name="capabilities" type="uint" enum="masking_capabilities"
	      summary="bitmask representing the supported masking capabilities"/>
    </event>

    <request name="get_background_blur">
      <description summary="create a new background blur object for a given surface">
        The surface must not already have an associated background blur object, otherwise 
        the already_constructed error is emitted.

        Immediately after the object is created, the compositor will send a 
        lvr_background_blur.set_state event, a lvr_background_blur.set_color_hint event, 
        and finally a lvr_background_blur.configure event.

        Surfaces must acknowledge the configure event and may then define the blur 
        region and optionally a supported clipping mask before the next commit.

        The client may ignore all configure events except for the last one.

        A client can send multiple lvr_background_blur.ack_configure requests before 
        committing, but only the last request sent prior to the commit indicates which 
        configure event the client is responding to.
      </description>
            
      <arg name="id" type="new_id" interface="lvr_background_blur"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="destroy" type="destructor">
      <description summary="destroy the background blur manager object">
        This doesn't destroy objects created with the manager.
      </description>
    </request>

  </interface>

  <interface name="lvr_background_blur" version="1">
    <description summary="blur effect applied to the background of a surface">
      The set_region request defines the blur area in local surface coordinates.

      An optional mask can be specified using either set_round_rect_mask or 
      set_svg_path_mask, if supported by the compositor. Setting one mask replaces 
      the other.

      The final blur area is determined by the intersection of the surface bounds, 
      the blur region, and the optional mask.

      Providing only a mask without a region is equivalent to defining an empty region.

      The client should avoid rendering fully opaque content within the blur area while 
      it is enabled. 
      Ideally, if the region is 100% transparent, the client should mark it as invisible 
      using the lvr_invisible_region protocol.

      For the blur effect to take effect, the compositor must send an enabled state event, 
      a configure event, and the client must acknowledge and commit either a null or 
      non-empty region.

      Thereafter, the compositor should maintain the effect state and color hint until 
      the client acknowledges and commits a new configuration.

      Initially, the blur area is an empty region (no blur).
    </description>

    <enum name="error">
      <entry name="destroyed_surface" 
        value="0" summary="surface destroyed before object"/>
      <entry name="invalid_serial" 
        value="1" summary="invalid ack serial"/>
      <entry name="unsupported_mask" 
        value="2" summary="the mask is not supported by the compositor"/>
      <entry name="invalid_round_rect" 
        value="3" summary="invalid round rect"/>
      <entry name="invalid_svg_path" 
        value="4" summary="invalid svg path"/>
    </enum>
    
    <enum name="state">
      <entry name="disabled" value="0" 
        summary="the blur effect is not displayed by the compositor"/>
      <entry name="enabled" value="1" 
        summary="the blur effect is displayed by the compositor"/>
    </enum>
    
    <enum name="color_hint">
      <entry name="unknown" value="0" summary="the blur effect color is unknown"/>
      <entry name="dark" value="1" summary="the blur effect has a dark tone"/>
      <entry name="light" value="2" summary="the blur effect has a light tone"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the background blur object">
        Switch back to a mode without background blur at the next commit.

        The object must be destroyed before the associated surface otherwise the 
        destroyed_surface error is emitted.
      </description>
    </request>
    
    <request name="set_region">
      <description summary="set the blurred region">
        This is a double-buffered operation, refer to wl_surface.commit. 

        Setting the pending blur region has copy semantics, allowing the 
        wl_region object to be destroyed immediately. 

        The region is defined in local surface coordinates and may extend
        beyond the surface bounds.

        Setting a null region means that the blur area automatically adapts 
        to the entire surface dimensions.

        The region is not considered a mask and is always supported by the compositor.

        The initial blur area is an empty region (no blur).
      </description>
      <arg name="region" type="object" allow-null="true" 
        interface="wl_region"/>
    </request>
    
    <request name="ack_configure">
      <description summary="ack a pending configuration">
        Acknowledging a serial that has not been sent, or one that has already 
        been acknowledged, triggers the invalid_serial error.
      </description>
      
      <arg name="serial" type="uint" summary="serial of the configure event"/>
    </request>
    
    <event name="state">
      <description summary="set the blur effect state">
        Specifies whether the blur effect is being applied by the compositor.

        If the effect is disabled, the surface no longer needs to make the 
        blur area transparent.
        
        This event is part of a configuration sequence and must later be framed 
        by a configure event for the client to process it.

        The compositor must wait for the client to acknowledge and commit the 
        configuration before applying it.
        
        The initial state is disabled.
      </description>
      <arg name="state" type="uint" enum="state" summary="the state of the blur effect."/>
    </event>
    
    <event name="color_hint">
      <description summary="set the color hint of the blur effect">
        This provides a color tone hint for the blur effect, allowing clients to adjust 
        their content accordingly. For example, white text may be preferable if the tone 
        is dark, while black text may be more suitable if the tone is light.

        This event is part of a configuration sequence and must later be framed by a 
        configure event for the client to process it.

        The compositor must wait for the client to acknowledge and commit the configuration 
        before applying the change.

        The initial value is unknown.
      </description>
      <arg name="color_hint" type="uint" enum="color_hint" summary="the color tone of the blur effect."/>
    </event>
    
    <event name="configure">
      <description summary="notifies a blur effect change">
        The configure event marks the end of a configure sequence.

        If the client receives multiple configure events before it can respond
        to one, it is free to discard all but the last event it received.
      </description>
      <arg name="serial" type="uint" summary="serial of the configure event"/>
    </event>

    <request name="clear_mask">
      <description summary="clear any previously set mask">
        This is a double-buffered operation, refer to wl_surface.commit. 
 
        This doesn't affect the blur region set with set_region.

        If no clipping was set previously, this is a no-op.
      </description>
    </request>

    <request name="set_round_rect_mask">
      <description summary="mask the blur region using a rounded rectangle">
        This is a double-buffered operation, refer to wl_surface.commit.

        The rounded rectangle is defined in local surface coordinates and may extend 
        beyond the surface bounds.

        If the width, height, or radius is negative, or if the sum of radii for an edge 
        exceeds the corresponding axis dimension, the invalid_round_rect error is emitted.

        If the compositor has not advertised support for this type of mask, the unsupported_mask 
        error is emitted.

        This request overrides any previously set mask.
      </description>

      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
      <arg name="width" type="int"/>
      <arg name="height" type="int"/>
      <arg name="radTL" type="int"/>
      <arg name="radTR" type="int"/>
      <arg name="radBR" type="int"/>
      <arg name="radBL" type="int"/>
    </request>
    
    <request name="set_svg_path_mask">
      <description summary="mask the blur region using an SVG path">
        This is a double-buffered operation, refer to wl_surface.commit.

        Setting the SVG path mask has copy semantics, allowing the 
        lvr_svg_path object to be destroyed immediately. 

        The SVG path is defined in local surface coordinates and may extend
        beyond the surface bounds.
        
        Setting an unconstructed or invalid path triggers the invalid_svg_path error.

        If the compositor has not advertised support for this type of mask, the unsupported_mask 
        error is emitted.

        This request replaces any previously set clipping.
      </description>
      <arg name="path" type="object" interface="lvr_svg_path" summary="the SVG path mask"/>
    </request>
    
  </interface>
</protocol>
