#ifndef LCLIENT_H
#define LCLIENT_H

#include <LObject.h>
#include <LRegion.h>
#include <LSurface.h>

using namespace Louvre::Protocols;
using namespace std;

/*!
 * @brief Representation of a Wayland client.
 *
 * The LClient class represents a Wayland client connected to the compositor. Provides access to many client resources generated by the original Wayland library,
 * to its surfaces, last serials used by the protocols, among other properties.\n
 */
class Louvre::LClient : public LObject
{
public:

    struct Params;

    /*!
     * Constructor of the LClient class.
     *
     * @param params Internal library parameters passed in the LCompositor::createClientRequest() virtual constructor.
     */
    LClient(Params *params);

    /*!
     * Destructor de the LClient class.
     */
    virtual ~LClient();

    LClient(const LClient&) = delete;
    LClient& operator= (const LClient&) = delete;

    /*!
     * Sends a Ping event to the client which must ack by invoking the LClient::pong() virtual method.\n
     * Used to detect if a client is unresponsive.
     *
     * @param serial Serial that the client must reply when calls LCLient::pong().
     */
    void ping(UInt32 serial) const;

    /*!
     * Client response to a LClient::ping() event.
     * Reimplement this virtual method if you want to be notified when a client responds to a LClient::ping() event.
     *
     * @param serial The same serial passed in LClient::ping().
     *
     * #### Default Implementation
     * @snippet LClientDefault.cpp pong
     */
    virtual void pong(UInt32 serial) const;

    /*!
     * The **wl_client** interface is part of the original Wayland library.
     */
    wl_client *client() const;

    /*!
     * The LDataDevice class is a wrapper for the [wl_data_device](https://wayland.app/protocols/wayland#wl_data_device) interface of the Wayland protocol
     * , used by the clipboard mechanism and for drag & drop sessions.
     */
    LDataDevice &dataDevice() const;

    /*!
     * List of surfaces created by the client.
     */
    const list<LSurface*>&surfaces() const;

    /*!
     * Returns a list of [wl_output](https://wayland.app/protocols/wayland#wl_output)
     * resources created when the client binds this global.\n
     * The library creates a [wl_output](https://wayland.app/protocols/wayland#wl_output)
     * global for each output added to the compositor in
     * order to notify the client the available outputs and their properties.
     */
    const list<Wayland::GOutput*>&outputGlobals() const;

    /*!
     * Resource created when the client binds to
     * the [wl_compositor](https://wayland.app/protocols/wayland#wl_compositor)
     * singleton global of the Wayland protocol.
     */
    const Wayland::GCompositor *compositorGlobal() const;

    /*!
     * List of resources created when the client binds to
     * the [wl_subcompositor](https://wayland.app/protocols/wayland#wl_subcompositor)
     * global of the Wayland protocol.
     */
    const list<Wayland::GSubcompositor*> &subcompositorGlobals() const;

    /*!
     * List of resources created when the client binds to
     * the [wl_seat](https://wayland.app/protocols/wayland#wl_seat)
     * global of the Wayland protocol.
     */
    const list<Wayland::GSeat*> &seatGlobals() const;

    /*!
     * Resource created when the client binds to
     * the [wl_data_device_manager](https://wayland.app/protocols/wayland#wl_data_device_manager)
     * singleton global of the Wayland protocol.
     */
    const Wayland::GDataDeviceManager* dataDeviceManagerGlobal() const;

    /*!
     * List of resources created when the client binds to the
     * [xdg_wm_base](https://wayland.app/protocols/xdg-shell#xdg_wm_base) global of the XdgShell protocol.
     */
    const list<XdgShell::GXdgWmBase *> &xdgWmBaseGlobals() const;

    /*!
     * List of resources created when the client binds to the
     * [zxdg_decoration_manager_v1](https://wayland.app/protocols/xdg-decoration-unstable-v1#zxdg_decoration_manager_v1) global
     * of the XdgDecoration protocol.
     *
     * The [zxdg_decoration_manager_v1](https://wayland.app/protocols/xdg-decoration-unstable-v1#zxdg_decoration_manager_v1)
     * interface allows the client and the compositor negotiate who should draw the decoration of
     * Toplevel surfaces.
     */
    const list<XdgDecoration::GXdgDecorationManager*> &xdgDecorationManagerGlobals() const;

    /*!
     * List of resources created when the client binds to the
     * [wp_presentation](https://wayland.app/protocols/presentation-time#wp_presentation) global of the
     * PresentationTime protocol.
     */
    const list<WpPresentationTime::GWpPresentation*> &wpPresentationTimeGlobals() const;

    /*!
     * List of resources generated when the client binds to the
     * [zwp_linux_dmabuf_v1](https://wayland.app/protocols/linux-dmabuf-unstable-v1#zwp_linux_dmabuf_v1) global
     * of the LinuxDMA-BUF protocol.
     */
    const list<LinuxDMABuf::GLinuxDMABuf*> &linuxDMABufGlobals() const;

    LPRIVATE_IMP(LClient)
};

#endif // LCLIENT_H
