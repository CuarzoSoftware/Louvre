#ifndef LCLIENT_H
#define LCLIENT_H

#include <list>
#include <LRegion.h>
#include <LSurface.h>

using namespace Louvre::Protocols;
using namespace std;

/*!
 * @brief Representation of a Wayland client.
 *
 * The LClient class represents a Wayland client connected to the compositor. Provides access to many client resources generated by the original Wayland library,
 * to its surfaces, last serials used by the protocols, among other properties.\n
 */
class Louvre::LClient
{
public:

    struct Params;

    /*!
     * @brief Constructor of the LClient class.
     *
     * @param params Internal library parameters passed int the LCompositor::createClientRequest virtual constructor.
     */
    LClient(Params *params);

    /*!
     * @brief Destructor de the LClient class.
     */
    virtual ~LClient();

    LClient(const LClient&) = delete;
    LClient& operator= (const LClient&) = delete;

    /*!
     * @brief Sends a Ping event to the client.
     *
     * Sends a Ping event to the client which must ack by invoking the pong() virtual method.\n
     * Used to detect if a client is unresponsive.
     *
     * @param serial Serial that the client must reply when calls pong().
     */
    void ping(UInt32 serial) const;

    /*!
     * @brief Response to a Ping event.
     *
     * Client response to a ping() event.
     *
     * Reimplement this virtual method if you want to be notified when a client responds to a ping() event.
     *
     * @param serial The same serial passed in ping().
     *
     * #### Default Implementation
     * @snippet LClientDefault.cpp pong
     */
    virtual void pong(UInt32 serial) const;

    /*!
     * @brief Returns a pointer to the compositor instance.
     *
     * This instance is the same for all clients. Not to be confused with the **wl_composer** interface resource
     * of the Wayland protocol returned by LClient::composerResource() which is unique per client.
     */
    LCompositor *compositor() const;

    /*!
     * @brief Retorna un puntero al asiento de eventos del compositor.
     *
     * Retorna la instancia global LSeat creada durante la inicialización del compositor. No confundir con el recurso
     * de la interfaz **wl_seat** del protocolo de Wayland retornado por LClient::seatResource() que sí es único por cliente.
     */
    LSeat *seat() const;

    /*!
     * @brief Returns the **wl_client** interface of the client.
     *
     * The **wl_client** interface is part of the original Wayland library.
     */
    wl_client *client() const;

    /*!
     * @brief Client's data device.
     *
     * The LDataDevice class is a wrapper for the **wl_data_device** interface of the Wayland protocol
     * , used by the clipboard mechanism and for drag & drop sessions.\n
     */
    LDataDevice &dataDevice() const;

    /*!
     * @brief List of surfaces created by the client.
     */
    const list<LSurface*>&surfaces() const;

    /*!
     * @brief List of **wl_output** resources.
     *
     * Returns a list of **wl_output** resources of the Wayland protocol.\n
     * The library creates a **wl_output** resource for each output added to the composer in order to notify the client
     * the available outputs and their attributes.
     */
    const list<Wayland::GOutput*>&outputGlobals() const;

    /*!
     * @brief Resource generated when the client binds to the **wl_compositor** singleton global of the Wayland protocol.
     */
    const Wayland::GCompositor *compositorGlobal() const;

    /*!
     * @brief List of resources generated when the client binds to the **wl_subcompositor** global of the Wayland protocol.
     */
    const list<Wayland::GSubcompositor*> &subcompositorGlobals() const;

    /*!
     * @brief List of resources generated when the client binds to the **wl_seat** global of the Wayland protocol.
     */
    const list<Wayland::GSeat*> &seatGlobals() const;

    /*!
     * @brief Resource generated when the client binds to the **wl_data_device_manager** singleton global of the Wayland protocol.
     */
    const Wayland::GDataDeviceManager* dataDeviceManagerGlobal() const;

    /*!
     * @brief List of resources generated when the client binds to the **xdg_wm_base** global of the XdgShell protocol.
     */
    const list<XdgShell::GXdgWmBase *> &xdgWmBaseGlobals() const;

    /*!
     * @brief List of resources generated when the client binds to the **wp_presentation** global of the PresentationTime protocol.
     */
    const list<WpPresentationTime::GWpPresentation*> &wpPresentationTimeGlobals() const;

    /*!
     * @brief List of resources generated when the client binds to the **zxdg_decoration_manager_v1** global of the XdgDecoration protocol.
     *
     * The **zxdg_decoration_manager_v1** interface allows the client to negotiate with the compositor who should
     * be in charge of rendering the decoration of a Toplevel surface.
     */
    const list<XdgDecoration::GXdgDecorationManager*> &xdgDecorationManagerGlobals() const;

    LPRIVATE_IMP(LClient)
};

#endif // LCLIENT_H
