<?xml version="1.0" encoding="UTF-8"?>
<protocol name="background_blur">
  <copyright>
    Copyright Â© 2025 Cuarzo Software

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <interface name="background_blur_manager" version="3">
    <description summary="background blur manager">
      This interface allows a compositor to announce support for blurring the 
      backgrounds of surfaces.
    </description>

    <enum name="error">
      <entry name="already_constructed" value="0" 
        summary="the surface already has an associated background blur object"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the background blur manager object">
        This doesn't destroy objects created with the manager.
      </description>
    </request>

    <request name="get_background_blur">
      <description summary="create a new background blur object for a given surface">
        The surface must not already have an associated background blur, otherwise 
        the already_constructed error is emitted.

        Immediately after the object is created, the compositor will send a state 
        event, a style event, and finally a configure event.

        Surfaces must acknowledge the configure event and may then define the blur 
        region and optionally a round rect or SVG path for clipping before the next 
        commit.

        The client may ignore all configure events except for the last one.

        A client can send multiple ack_configure requests before committing, but only 
        the last request sent prior to the commit indicates which configure event the 
        client is responding to.
      </description>
            
      <arg name="id" type="new_id" interface="background_blur"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>
  </interface>

  <interface name="background_blur" version="3">
    <description summary="blur effect applied to the background of a surface">
      Starting from version 2, clients are permitted to clip the blur region using a 
      round rect.

      Starting from version 3, clients are permitted to clip the blur region using an 
      svg_path object.

      The set_region request is used to define the blur area in local surface coordinates. 
      Optional clipping can be applied using either set_round_rect_clip or set_svg_path_clip 
      (setting one replaces the other).

      The final blur area is the intersection of the surface bounds, the blur region, and 
      the optional additional clipping.

      Providing only clipping without a region is the same as having an empty region.

      The client should avoid rendering completely opaque content within the blur area while 
      enabled and should ideally mark it as invisible using the invisible-region protocol if 
      the region is 100% transparent.

      In order for the blur to take effect, the compositor must send an enabled state 
      event, a configure event, and the client must ACK and commit a null or non-empty 
      region.

      The same applies afterwards, the compositor should keep the effect state and style 
      until the client acknowledges and commits a new configuration.

      The initial blur area is an empty region (no blur).
    </description>

    <enum name="error">
      <entry name="destroyed_surface" 
        value="0" summary="surface destroyed before object"/>
      <entry name="invalid_serial" 
        value="1" summary="invalid ack serial"/>
      <entry name="invalid_round_rect" 
        value="2" since="2" summary="invalid round rect"/>
      <entry name="invalid_svg_path" 
        value="3" since="3" summary="invalid svg path"/>
    </enum>
    
    <enum name="state">
      <entry name="disabled" value="0" 
        summary="the blur effect is not displayed by the compositor"/>
      <entry name="enabled" value="1" 
        summary="the blur effect is displayed by the compositor"/>
    </enum>
    
    <enum name="style">
      <entry name="dark" value="0" summary="the blur effect has a dark tone"/>
      <entry name="light" value="1" summary="the blur effect has a light tone"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the vector path object">
        Switch back to a mode without background blur at the next commit.

        The object must be destroyed before the associated surface otherwise the 
        destroyed_surface error is emitted.
      </description>
    </request>
    
    <request name="set_region">
      <description summary="set the blurred region">
        This is a double-buffered operation, refer to wl_surface.commit. 

        Setting the pending blur region has copy semantics, allowing the 
        wl_region object to be destroyed immediately. 

        The region is defined in local surface coordinates and may extend
        beyond the surface bounds.

        Setting a null region means that the blur area automatically adapts 
        to the entire surface dimensions.

        The initial blur area is an empty region (no blur).
      </description>
      <arg name="blur_region" type="object" allow-null="true" 
        interface="wl_region"/>
    </request>
    
    <request name="ack_configure">
      <description summary="ack a pending configuration">
        Acknowledging a serial that has not been sent, or one that has already 
        been acknowledged, triggers the invalid_serial error.
      </description>
      
      <arg name="serial" type="uint" summary="serial of the configure event"/>
    </request>
    
    <event name="state">
      <description summary="set the blur effect state">
        Specifies whether the blur effect is being applied by the compositor.

        If the effect is disabled, the surface no longer needs to make the 
        blur area transparent.
        
        Must be followed by a configure event in order to take effect.
        
        The initial state is disabled.
      </description>
      <arg name="state" type="uint" enum="state" summary="The state of the blur effect."/>
    </event>
    
    <event name="style">
      <description summary="set the color tone of the blur effect.">
        The style specifies the color tone of the blur effect so that clients can 
        adapt their content accordingly, for example, displaying white text if the 
        tone is dark or black text if the tone is light. 
        
        Must be followed by a configure event in order to take effect.
        
        The initial value is light.
      </description>
      <arg name="style" type="uint" enum="style" summary="The color tone of the blur effect."/>
    </event>
    
    <event name="configure">
      <description summary="notifies a blur effect change">
	      The configure event marks the end of a configure sequence.

	      If the client receives multiple configure events before it can respond
	      to one, it is free to discard all but the last event it received.
      </description>
      <arg name="serial" type="uint" summary="serial of the configure event"/>
    </event>

    <request name="clear_clip" since="2">
      <description summary="clear any previously set clipping">
        This is a double-buffered operation, refer to wl_surface.commit. 
 
        This doesn't affect the blur region set with set_region.

        If no clipping was set previously, this is a no-op.
      </description>
    </request>

    <request name="set_round_rect_clip" since="2">
      <description summary="clip the blur region using a round rect">
        This is a double-buffered operation, refer to wl_surface.commit.

        The round rect is defined in local surface coordinates and may extend
        beyond the surface bounds.
        
        Setting a negative width, height, or radius, or if the sum of radii for an 
        edge exceeds the dimensions for that axis, the invalid_round_rect error
        is emitted.

        This request replaces any previously set clipping.
      </description>
      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
      <arg name="width" type="int"/>
      <arg name="height" type="int"/>
      <arg name="radTL" type="int"/>
      <arg name="radTR" type="int"/>
      <arg name="radBR" type="int"/>
      <arg name="radBL" type="int"/>
    </request>
    
    <request name="set_svg_path_clip" since="3">
      <description summary="clip the blur region using an svg_path object">
        This is a double-buffered operation, refer to wl_surface.commit.

        Setting the svg_path clip has copy semantics, allowing the 
        svg_path object to be destroyed immediately. 

        The SVG path is defined in local surface coordinates and may extend
        beyond the surface bounds.
        
        Setting an unconstructed or invalid path triggers the invalid_path error.

        This request replaces any previously set clipping.
      </description>
      <arg name="path" type="object" interface="svg_path" summary="the SVG path object"/>
    </request>
    
  </interface>
</protocol>
