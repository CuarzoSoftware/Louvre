#ifndef LCLIENT_H
#define LCLIENT_H

#include <list>
#include <LRegion.h>
#include <LSurface.h>

using namespace std;

/*!
 * @brief Representation of a Wayland client.
 *
 * The LClient class represents a Wayland client connected to the compositor. Provides access to many client resources generated by the original Wayland library, 
 * to its surfaces, last serials used by the protocols, among other properties.
 */
class Louvre::LClient
{
public:

    struct Params;

    /*!
     * @brief Constructor of the LClient class.
     *
     * @param params Internal library parameters passed int the LCompositor::createClientRequest virtual constructor.
     */
    LClient(Params *params);

    /*!
     * @brief Destructor de the LClient class.
     */
    ~LClient();

    LClient(const LClient&) = delete;
    LClient& operator= (const LClient&) = delete;

    /*!
     * @brief Serials of the last events sent by protocols used by the client.
     */
    struct Serials
    {
        /// @brief Last serial generated by LPointer::setFocus.
        /// Internally the library calls the **wl_pointer_send_enter_event** method of the Wayland protocol.
        UInt32 lastPointerEnterEventSerial = 0;

        /// @brief Last serial generated by LPointer::setFocus with nullptr as argument.
        /// Internally the library calls the **wl_pointer_send_leave_event** method of the Wayland protocol.
        UInt32 lastPointerLeaveEventSerial = 0;

        /// @brief Last serial generated by LPointer::sendButtonEvent.
        /// Internally the library calls the **wl_pointer_send_button_event** method of the Wayland protocol.
        UInt32 lastPointerButtonEventSerial = 0;

        /// @brief Last serial generated by LKeyboard::setFocus.
        /// Internally the library calls the **wl_keyboard_send_enter_event** method of the Wayland protocol.
        UInt32 lastKeyboardEnterEventSerial = 0;

        /// @brief Last serial generated by LKeyboard::setFocus with nullptr as argument.
        /// Internally the library calls the **wl_keyboard_send_leave_event** method of the Wayland protocol.
        UInt32 lastKeyboardLeaveEventSerial = 0;

        /// @brief Last serial generated by LKeyboard::sendKeyEvent.
        /// Internally the library calls the **wl_keyboard_send_key_event** method of the Wayland protocol.
        UInt32 lastKeyboardKeyEventSerial = 0;

        /// @brief Last serial generated by LKeyboard::sendModifiersEvent.
        /// Internally the library calls the **wl_keyboard_send_modifiers_event** method of the Wayland protocol.
        UInt32 lastKeyboardModifiersEventSerial = 0;
    };

    /*!
     * @brief Returns a pointer to the compositor instance.
     *
     * This instance is the same for all clients. Not to be confused with the **wl_composer** interface resource
     * of the Wayland protocol returned by LClient::composerResource() which is unique per client.
     */
    LCompositor *compositor() const;

    /*!
     * @brief Retorna un puntero al asiento de eventos del compositor.
     *
     * Retorna la instancia global LSeat creada durante la inicialización del compositor. No confundir con el recurso
     * de la interfaz **wl_seat** del protocolo de Wayland retornado por LClient::seatResource() que sí es único por cliente.
     */
    LSeat *seat() const;

    /*!
     * @brief Returns the **wl_client** interface of the client.
     *
     * The **wl_client** interface is part of the original Wayland library.
     */
    wl_client *client() const;

    /*!
     * @brief Returns a pointer to the client's data device.
     *
     * The LDataDevice class is a wrapper for the **wl_data_device** interface of the Wayland protocol
     * , used by the clipboard mechanism and for drag & drop sessions.\n
     *
     * Returns ***nullptr*** if the client has not created the resource.
     */
    LDataDevice *dataDevice() const;

    /*!
     * @brief List of surfaces created by the client.
     */
    const list<LSurface*>&surfaces() const;

    /*!
     * @brief List of **wl_output** resources.
     *
     * Returns a list of **wl_output** resources of the Wayland protocol.\n
     * The library creates a **wl_output** resource for each output added to the composer in order to notify the client
     * the available outputs and their attributes.
     */
    const list<wl_resource*>&outputs() const;

    /*!
     * @brief Returns the resource generated by the **wl_compositor** interface of the Wayland protocol.
     *
     * The **wl_compositor** interface is unique per client and its purpose is to allow the client to create surfaces and regions.
     */
    wl_resource *compositorResource() const;

    /*!
     * @brief Returns the resource generated by the **wl_seat** interface of the Wayland protocol.
     *
     * The **wl_seat** interface is unique per client and its purpose is to report event seat capabilities
     * (if it generates pointer, keyboard, or touch events).\n
     *
     * Returns ***nullptr*** if the client has not created the resource.
     */
    wl_resource *seatResource() const;

    /*!
     * @brief Returns the resource generated by the **xdg_wm_base** interface of the XDG Shell protocol.
     *
     * The **xdg_wm_base** interface is unique per client and its purpose is to allow the client to create Toplevel and Popup roles for surfaces.\n
     *
     * Returns ***nullptr*** if the client has not created the resource.
     */
    wl_resource *xdgWmBaseResource() const;

    /*!
     * @brief Returns the resource generated by the **zxdg_decoration_manager_v1** interface of the XDG Decoration protocol.
     *
     * The **zxdg_decoration_manager_v1** interface is unique per client and its purpose is to allow the client to negotiate
     * with the compositor who should be in charge of rendering the decoration of a Toplevel surface.\n
     *
     * Returns ***nullptr*** if the client has not created the resource.
     */
    wl_resource *xdgDecorationManagerResource() const;

    /*!
     * @brief Returns the resource generated by the **wl_pointer** interface of the Wayland protocol.
     *
     * The **wl_pointer** interface is unique per client and its purpose is to allow the client to receive events from the pointer.\n
     *
     * Returns ***nullptr*** if the client has not created the resource.
     */
    wl_resource *pointerResource() const;

    /*!
     * @brief Returns the resource generated by the **wl_keyboard** interface of the Wayland protocol.
     *
     * The **wl_keyboard** interface is unique per client and its purpose is to allow the client to receive keyboard events.\n
     *
     * Returns ***nullptr*** if the client has not created the resource.
     */
    wl_resource *keyboardResource() const;

    /*!
     * @brief Returns the resource generated by the **wl_touch** interface of the Wayland protocol.
     *
     * The **wl_touch** interface is unique per client and its purpose is to allow the client to receive touch events.\n
     *
     * Returns ***nullptr*** if the client has not created the resource.
     */
    wl_resource *touchResource() const;

    /*!
     * @brief Serials of the latest events sent by protocols used by the client.
     *
     * Returns a Struct with the record of the last serials generated by protocol events used by the client.
     */
    const Serials &serials() const;

    class LClientPrivate;

    /*!
     * @brief Access to the private API of LClient.
     *
     * Returns an instance of the LClientPrivate class (following the ***PImpl Idiom*** pattern) which contains all the private members of LClient.\n
     * Used internally by the library.
     */
    LClientPrivate *imp() const;
private:
    LClientPrivate *m_imp = nullptr;

};

#endif // LCLIENT_H
