#ifndef LOUTPUTMANAGER_H
#define LOUTPUTMANAGER_H

#include <LNamespaces.h>
#include <list>

using namespace std;

/*!
 * @brief Access to graphical outputs and hotplug events
 *
 * The LOutputManager class grants access to the list of currently available outputs generated by the graphic backend.\n
 * In addition, it has virtual methods that notify the connection and disconnection of these, for example, when an external monitor is connected or disconnected via an HDMI port.\n
 * There is a single instance which can be accessed from LCompositor::outputManager().\n
 * To use your own implementation of LOutputManager, reimplement its virtual constructor (LCompositor::createOutputManagerRequest).
 */
class Louvre::LOutputManager
{
public:
    struct Params;

    /*!
     * @brief LOutputManager class constructor.
     *
     * There is a single instance of LOutputManager, which can be accessed from LCompositor::outputManager().
     *
     * @param params Internal library parameters provided in the virtual constructor LCompositor::createOutputManagerRequest().
     */
    LOutputManager(Params *params);

    /*!
     * @brief LOutputManager class destructor.
     *
     * Internally invoked by the library after its destruction is notified with LCompositor::destroyOutputManagerRequest().
     */
    virtual ~LOutputManager();

    LOutputManager(const LOutputManager&) = delete;
    LOutputManager& operator= (const LOutputManager&) = delete;

    /*!
     * @brief Global compositor instance.
     */
    LCompositor *compositor() const;

    /*!
     * @brief Available outputs.
     *
     * List of currently available outputs.
     */
    const list<LOutput*>*outputs() const;

    /*!
     * @name Virtual methods
     */
///@{

    /*!
     * @brief New available output.
     *
     * The outputPlugged() method is invoked by the graphic backend when a new output is available, for example when connecting an external monitor through a VGA or HDMI port.\n
     * You can reimplement this method to be notified when a new output is available.\n
     * The default implementation initializes the new output and positions it at the end of the already initialized outputs.
     *
     * ### Default Implementation
     * @snippet LOutputManagerDefault.cpp outputPlugged
     */
    virtual void outputPlugged(LOutput *output);

    /*!
     * @brief Disconnected output.
     *
     * The outputUnplugged() method is invoked by the graphical backend when an output is no longer available, for example when an external monitor connected to a VGA or HDMI port is disconnected.\n
     * You can override this method to be notified when an output is no longer available.\n
     *
     * The default implementation removes the output from the compositor if it is initialized
     * and re-arranges the ones already initialized.
     *
     * #### Default Implementation
     * @snippet LOutputManagerDefault.cpp outputUnplugged
     */
    virtual void outputUnplugged(LOutput *output);

///@}

    class LOutputManagerPrivate;

    /*!
     * @brief Access to the private API of LOutputManager.
     *
     * Returns an instance of the LOutputManagerPrivate class (following the ***PImpl Idiom*** pattern) which contains all the private members of LOutputManager.\n
     * Used internally by the library.
     */
    LOutputManagerPrivate *imp() const;
private:
    LOutputManagerPrivate *m_imp = nullptr;
};

#endif // LOUTPUTMANAGER_H
